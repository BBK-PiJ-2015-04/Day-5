/*

The greatest common divisor (GCD) of two natural numbers
is the largest natural number that can exactly divide them
both. For example, the GCD of 12 and 15 is 3, the GCD of
12 and 6 is 6 (because both divisons 12/6 and 6/6 are
exact), and the greatest common divisor of 14 and 27 is 1.

Finding the GCD of two numbers has a lot of applications
in cryptography and information security. We can find the
GCD of two numbers by finding all of them and them matching
the lists for both numbers, but there is a faster way. The
GCD has the property that:-

	if p > q, then gcd(p, q) = gcd(q, p mod q)

where mod represents the modulo operator (i.e. %).
Therefore, given two numbers p and q, where p > q, if q is
a divisor of p, then q is the GCD of both numbers;
otherwise, we can apply the property above to find a pair
of smaller numbers with the same GCD.

Write a program that finds the GCD of two natural numbers
recursively using this property. (Hint: your base case is
that if q is a divisor of p, then q is the GCD of p and q.)

*/

println ();
print ("Enter the first number: ");
String userInput = System.console().readLine();
int number1 = Integer.parseInt(userInput);
print ("Enter the second number: ");
userInput = System.console().readLine();
int number2 = Integer.parseInt(userInput);

println ("The greatest common divisor of " + number1 + " and " + number2 + " is " + gcd (number1, number2));

int gcd (int number1, int number2) {
	if (number1 % number2 == 0) {
		return number2;
	}
	else {
		return gcd (number2, number1 % number2);
	}
}
